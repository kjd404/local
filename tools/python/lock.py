#!/usr/bin/env python3
import os
import shutil
import subprocess
import sys
import tempfile
from pathlib import Path


HEADER = """# requirements.lock
# Generated by: bazel run //:lock
# Interpreter: {python}
# To update: edit requirements.in then run the command above.
"""


def ws_root() -> Path:
    ws = os.environ.get("BUILD_WORKSPACE_DIRECTORY")
    return Path(ws) if ws else Path.cwd()


def run(cmd, **kwargs):
    print("[lock] $", " ".join(cmd))
    subprocess.run(cmd, check=True, **kwargs)


def main() -> int:
    ws = ws_root()
    in_file = ws / "requirements.in"
    out_file = ws / "requirements.lock"

    if not in_file.exists():
        print(f"[lock] Missing {in_file.name}. Create it with top-level deps.")
        return 1

    tmpdir = Path(tempfile.mkdtemp(prefix="pylock-", dir=str(ws)))
    try:
        venv_dir = tmpdir / ".venv-lock"
        print(f"[lock] Creating temporary resolver venv at {venv_dir}")
        run([sys.executable, "-m", "venv", str(venv_dir)])
        # Ensure pip is present and recent; install/upgrade for consistency
        vpy = venv_dir / "bin" / "python"
        run([str(vpy), "-m", "ensurepip", "--upgrade"])  # idempotent
        run(
            [
                str(vpy),
                "-m",
                "pip",
                "install",
                "--upgrade",
                "pip",
                "wheel",
                "setuptools",
            ]
        )  # baseline tooling

        # Install requested top-level deps
        print(f"[lock] Installing from {in_file.name}")
        run([str(vpy), "-m", "pip", "install", "-r", str(in_file)])

        # Freeze fully resolved versions
        print(f"[lock] Writing pinned requirements to {out_file.relative_to(ws)}")
        result = subprocess.run(
            [str(vpy), "-m", "pip", "freeze"],
            check=True,
            capture_output=True,
            text=True,
        )
        content = result.stdout
        tmp_out = tmpdir / "requirements.lock.tmp"
        with tmp_out.open("w", encoding="utf-8") as f:
            f.write(
                HEADER.format(python=f"{sys.version.split()[0]} @ {sys.executable}")
            )
            if not content.startswith("\n"):
                f.write("\n")
            f.write(content)
        # Atomic replace
        shutil.move(str(tmp_out), str(out_file))
        print("[lock] Done.")
    finally:
        shutil.rmtree(tmpdir, ignore_errors=True)

    return 0


if __name__ == "__main__":
    raise SystemExit(main())
