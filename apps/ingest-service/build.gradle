plugins {
    id 'java'
    id 'nu.studer.jooq' version '9.0'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
}

group = 'org.artificers'
version = '0.0.1-SNAPSHOT'
java.sourceCompatibility = JavaVersion.VERSION_17
java.targetCompatibility = JavaVersion.VERSION_17

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.flywaydb:flyway-core:9.22.3'
    implementation 'org.jooq:jooq:3.18.5'
    implementation 'com.zaxxer:HikariCP:5.1.0'
    implementation 'com.opencsv:opencsv:5.9'
    implementation 'com.google.protobuf:protobuf-java:4.27.2'
    implementation 'org.apache.poi:poi-ooxml:5.2.3'
    implementation 'jakarta.annotation:jakarta.annotation-api:2.1.1'
    runtimeOnly 'org.postgresql:postgresql:42.6.0'
    implementation 'commons-codec:commons-codec:1.15'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.15.2'
    implementation 'info.picocli:picocli:4.7.5'
    implementation 'ch.qos.logback:logback-classic:1.4.11'
    implementation 'org.slf4j:slf4j-api:2.0.9'
    implementation 'com.google.dagger:dagger:2.51.1'
    annotationProcessor 'com.google.dagger:dagger-compiler:2.51.1'
    testAnnotationProcessor 'com.google.dagger:dagger-compiler:2.51.1'

    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.1'
    testImplementation 'org.mockito:mockito-core:5.7.0'
    testImplementation 'org.assertj:assertj-core:3.24.2'
    testImplementation 'com.h2database:h2:2.2.224'

    // Needed for jOOQ's DDLDatabase integration
    jooqGenerator 'org.jooq:jooq-meta-extensions:3.18.5'
}

sourceSets {
    main {
        java { srcDir 'src/generated/java' }
        resources { srcDir '../../ops/sql' }
    }
}

jooq {
    version = '3.18.5'
    configurations {
        main {
            generateSchemaSourceOnCompilation = false
            jooqConfiguration.with {
                logging = org.jooq.meta.jaxb.Logging.WARN
                generator = new org.jooq.meta.jaxb.Generator()
                generator.with {
                    name = 'org.jooq.codegen.JavaGenerator'
                    database = new org.jooq.meta.jaxb.Database()
                    database.with {
                        name = 'org.jooq.meta.extensions.ddl.DDLDatabase'
                        properties = [
                            new org.jooq.meta.jaxb.Property().withKey('scripts').withValue('../../ops/sql/*.sql'),
                            new org.jooq.meta.jaxb.Property().withKey('sort').withValue('flyway')
                        ]
                    }
                    target = new org.jooq.meta.jaxb.Target()
                    target.with {
                        packageName = 'org.artificers.jooq'
                        directory = 'src/generated/java'
                    }
                }
            }
        }
    }
}


tasks.withType(Test) {
    useJUnitPlatform()
}

shadowJar {
    archiveClassifier.set('')
    manifest {
        attributes 'Main-Class': 'org.artificers.ingest.IngestApp'
    }
}

tasks.build {
    dependsOn shadowJar
}

jar {
    enabled = false
}

tasks.register('newAccount', JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'org.artificers.ingest.cli.NewAccountCliLauncher'
}
