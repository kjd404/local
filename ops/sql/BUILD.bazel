filegroup(
    name = "sql_files",
    srcs = glob(["*.sql"]),
    visibility = ["//visibility:public"],
)

# jOOQ code generation (DDLDatabase) using a consolidated schema
java_binary(
    name = "jooq_codegen",
    main_class = "org.jooq.codegen.GenerationTool",
    runtime_deps = [
        "@maven//:org_jooq_jooq",
        "@maven//:org_jooq_jooq_meta",
        "@maven//:org_jooq_jooq_codegen",
        "@maven//:org_jooq_jooq_meta_extensions",
        "@maven//:org_slf4j_slf4j_api",
        "@maven//:ch_qos_logback_logback_classic",
        "@maven//:jakarta_xml_bind_jakarta_xml_bind_api",
        "@maven//:org_glassfish_jaxb_jaxb_runtime",
        "@maven//:jakarta_activation_jakarta_activation_api",
    ],
    visibility = ["//visibility:private"],
)

genrule(
    name = "jooq_srcjar",
    srcs = [":sql_files"],
    tools = [":jooq_codegen"],
    outs = ["jooq.srcjar"],
    cmd = """
set -euo pipefail
WORK=$$(mktemp -d)
CFG="$$WORK/jooq-config.xml"
OUTDIR="$$WORK/out"
SQLDIR="$$WORK/sql"
MERGED="$$WORK/merged.sql"
mkdir -p "$$OUTDIR" "$$SQLDIR"
for f in $(SRCS); do cp "$$f" "$$SQLDIR"/; done

# Build consolidated schema (accounts, poll_state, transactions)
perl -0777 -pe 's/\\bTEXT\\b/VARCHAR(255)/gi; s/\\bJSONB\\b/CLOB/gi; s/\\bTIMESTAMPTZ\\b/TIMESTAMP WITH TIME ZONE/gi; s/\\bBIGSERIAL\\b/BIGINT GENERATED BY DEFAULT AS IDENTITY/gi; s/DEFAULT[ ]*now\\(\\)/DEFAULT CURRENT_TIMESTAMP/gi' "$$SQLDIR"/V3__create_accounts.sql > "$$MERGED"
printf '\n' >> "$$MERGED"
perl -0777 -pe 's/\\bTEXT\\b/VARCHAR(255)/gi; s/\\bJSONB\\b/CLOB/gi; s/\\bTIMESTAMPTZ\\b/TIMESTAMP WITH TIME ZONE/gi; s/\\bBIGSERIAL\\b/BIGINT GENERATED BY DEFAULT AS IDENTITY/gi; s/DEFAULT[ ]*now\\(\\)/DEFAULT CURRENT_TIMESTAMP/gi' "$$SQLDIR"/V5__account_poll_state.sql >> "$$MERGED"
printf '\n' >> "$$MERGED"
cat >> "$$MERGED" <<'EOS'
CREATE TABLE IF NOT EXISTS transactions (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    account_id BIGINT NOT NULL REFERENCES accounts(id),
    occurred_at TIMESTAMP WITH TIME ZONE,
    posted_at TIMESTAMP WITH TIME ZONE,
    amount_cents BIGINT NOT NULL,
    currency VARCHAR(255) NOT NULL DEFAULT 'USD',
    merchant VARCHAR(255),
    category VARCHAR(255),
    memo VARCHAR(255),
    txn_type VARCHAR(255),
    hash VARCHAR(255) NOT NULL,
    raw_json CLOB NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);
EOS
perl -0777 -pe 's/\\bTEXT\\b/VARCHAR(255)/gi; s/\\bJSONB\\b/CLOB/gi; s/\\bTIMESTAMPTZ\\b/TIMESTAMP WITH TIME ZONE/gi; s/\\bBIGSERIAL\\b/BIGINT GENERATED BY DEFAULT AS IDENTITY/gi; s/DEFAULT[ ]*now\\(\\)/DEFAULT CURRENT_TIMESTAMP/gi' "$$SQLDIR"/V10__consolidate_transactions.sql \
  | awk 'BEGIN{RS=";"; ORS=";"} !($$0 ~ /^[[:space:]]*CREATE[[:space:]]+UNIQUE[[:space:]]+INDEX/ || $$0 ~ /^[[:space:]]*DROP[[:space:]]+(TABLE|INDEX)/ || $$0 ~ /^[[:space:]]*INSERT[[:space:]]+INTO[[:space:]]+transactions/i) { print $$0 }' >> "$$MERGED"

cat > "$$CFG" <<'EOF'
<configuration xmlns="http://www.jooq.org/xsd/jooq-codegen-3.18.0.xsd">
  <onError>LOG</onError>
  <generator>
    <database>
      <name>org.jooq.meta.extensions.ddl.DDLDatabase</name>
      <properties>
        <property><key>scripts</key><value>REPLACED_BY_GENRULE</value></property>
        <property><key>sort</key><value>flyway</value></property>
        <property><key>parseIgnore</key><value>CREATE UNIQUE INDEX.*</value></property>
        <property><key>unparseableStatements</key><value>ignore</value></property>
        <property><key>dialect</key><value>POSTGRES</value></property>
      </properties>
    </database>
    <target>
      <packageName>org.artificers.jooq</packageName>
      <directory>REPLACED_OUTDIR</directory>
    </target>
  </generator>
  </configuration>
EOF

sed -i.bak -e "s|REPLACED_BY_GENRULE|$$MERGED|g" -e "s|REPLACED_OUTDIR|$$OUTDIR|g" "$$CFG"
$(location :jooq_codegen) "$$CFG"
(
  cd "$$OUTDIR"
  zip -q -r jooq.srcjar .
)
mv "$$OUTDIR"/jooq.srcjar "$@"
""",
    visibility = ["//visibility:public"],
)

java_library(
    name = "jooq_model",
    srcs = [":jooq_srcjar"],
    deps = ["@maven//:org_jooq_jooq"],
    visibility = ["//visibility:public"],
)

sh_binary(
    name = "db_migrate",
    srcs = ["migrate.sh"],
    visibility = ["//visibility:public"],
)
